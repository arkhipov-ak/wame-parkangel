import Logotype from '/src/assets/logo.svg'
import { Popover } from 'antd'
import { useEffect, useState } from 'react'
import ReactCodeInput from 'react-code-input'
import { useNavigate } from 'react-router-dom'
import axios from 'src/api/interceptors'
import Button from 'src/components/common/Button'
import Modal from 'src/components/common/Modal'
import { state } from 'src/state'
import { supportLink } from 'src/utils/constants'
import { hideKeyboard } from 'src/utils/functions'
import { showErrorSnackbar } from 'src/utils/showSnackBar'
import { useSnapshot } from 'valtio'
import Cookies from 'js-cookie';

import styles from './Home.module.css'

const Home = () => {
  const snap = useSnapshot(state)
  const [isImageLoaded, setImageLoaded] = useState(false);
  const navigate = useNavigate();
  const [openPasswordModal, setOpenPasswordModal] = useState(false);
  const [password, setPassword] = useState("");
  const [nickname, setNickname] = useState("");
  const [loading, setLoading] = useState(false);
  const [verification, setVerification] = useState(false);
  const [code, setCode] = useState("");
  const [isCodeCorrect, setIsCodeCorrect] = useState(true);
  const [registrationLink, setRegistrationLink] = useState("");

  const onHandleSubmit = (e) => {
    e.preventDefault();
    
    if (password === snap.user.password) {
      setOpenPasswordModal(false);
      navigate("/search-time");
    } else {
      showErrorSnackbar({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", tryAgain: true });
    }
  };

  const onHandleLoginClick = () => {
    if (!nickname.trim()) return showErrorSnackbar({ message: "Telegram-–Ω–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tryAgain: true })

    axios.post(
      "https://api.parkangel.ru/api/users/registration", { telegram: nickname.trim() }
    ).then((response) => {
      if (response.data.response === true) setVerification(true);
      else {
        setVerification(true);
        setRegistrationLink(response.data.response);
      }
    }).catch(() => showErrorSnackbar({ message: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫" }))
  };

  useEffect(() => {
  const savedUser = Cookies.get('user');

  if (savedUser) {
    const user = JSON.parse(savedUser);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å state.user
    if (!snap.user || JSON.stringify(snap.user) !== JSON.stringify(user)) {
      state.user = user;

      // –î–∞–ª–µ–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –∫–∞–∫ –æ–±—ã—á–Ω–æ
      if (user.password) {
        setOpenPasswordModal(true);
      } else if (user.dateAcceptAgreement) {
        navigate("/search-time");
      } else {
        navigate("/agreement");
      }
    }
  } else {
    setLoading(true);

    const renderAgreementInfo = () => {
      if (!snap.user) {
        setLoading(false);
        return;
      }
      if (snap.user.password) {
        setOpenPasswordModal(true);
        setLoading(false);
        return;
      }

      setLoading(false);

      if (snap.user.isAcceptAgreement) {
        navigate("/search-time");
      } else {
        navigate("/agreement");
      }
    };

    const timer = setTimeout(() => renderAgreementInfo(), 2500);

    return () => {
      clearTimeout(timer);
    };
  }
}, [snap.user, navigate]);

  useEffect(() => {
    setIsCodeCorrect(true);
		if (code.length === 4) {
      axios.post("https://api.parkangel.ru/api/users/verify", { telegram: nickname.trim(), code })
      .then((response) => {
        if (response.data.response) {
          state.user = response.data.response;
          
          Cookies.set('user', JSON.stringify(response.data.response), { expires: 7 });
    
          if (response.data.response.password) return setOpenPasswordModal(true);
          if (response.data.response.dateAcceptAgreement) navigate("/search-time");
          else navigate("/agreement");
        } else {
          setIsCodeCorrect(false);
          showErrorSnackbar({ message: "–ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ", tryAgain: true });
        }
      }).catch(() => showErrorSnackbar({ message: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫" }))
		}
	}, [code]);

  return (
    <div className={styles.wrapper}>
      {
        !isImageLoaded && (
          <div style={{
            width: "9.3125rem",
            height: "9.3125rem",
            borderRadius: "1.9375rem",
            background: "#353536",
          }} />
        )
      }
      <img src={Logotype} alt="–õ–æ–≥–æ—Ç–∏–ø" onLoad={() => setImageLoaded(true)} style={{ display: isImageLoaded ? "block" : "none" }} />
      <p className={styles.text_main}>
        {isImageLoaded ? "–°–µ—Ä–≤–∏—Å –ø–æ –ø–æ–∏—Å–∫—É  –∏ —Å–¥–∞—á–µ –º–∞—à–∏–Ω–æ-–º–µ—Å—Ç:" : "–ó–∞–≥—Ä—É–∑–∫–∞..."}
      </p>
      <span className={styles.text_descr}>
        {isImageLoaded ? "–æ—Ç —á–∞—Å–∞ –¥–æ –≥–æ–¥–∞" : " "}
      </span>
      {!loading && !snap.user && (
        <>
          {verification ? (
            <div className={styles.login_wrapper}>
              {registrationLink ? (
                <span className={styles.verification_text}>–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ —Å—Å—ã–ª–∫–µ
                  –≤ <a href={registrationLink} target="_blank" rel="noopener noreferrer" className={styles.link}>Telegram</a> –∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥
                </span>
              ) : (
                <span className={styles.verification_text}>
                  –ù–∞–º –Ω—É–∂–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à Telegram, –º—ã –≤—ã—Å–ª–∞–ª–∏ –≤–∞–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥
                </span>
              )}
              <ReactCodeInput
                type="number"
                inputMode="numeric"
                fields={4}
                value={code}
                name="code"
                onChange={setCode}
                isValid={isCodeCorrect}
              />
              <button type="button" onClick={onHandleLoginClick} className={styles.link_button}>
                <span className={styles.link_button_text}>–ù–µ –ø—Ä–∏—à–µ–ª –∫–æ–¥? –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ!</span>
              </button>
            </div>
          ) : (
            <div className={styles.login_wrapper}>
              <Popover
                title="üí°"
                content={
                  <>
                    <p>
                      - –í –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ telegram –Ω–∞–∂–º–∏—Ç–µ ¬´–Ω–∞—Å—Ç—Ä–æ–π–∫–∏¬ª. –í–∞—à –Ω–∏–∫ –±—É–¥–µ—Ç –ø–æ–¥ –∞–≤–∞—Ç–∞—Ä–∫–æ–π. –û–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @<br/>
                      - –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –±–µ–∑ @
                    </p>
                  </>
                }
                trigger="click"
                overlayStyle={{maxWidth: "320px"}}
              >
                <button className={styles.link_button}>
                  <span className={styles.link_button_text}>–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å Telegram-–Ω–∏–∫–Ω–µ–π–º?</span>
                </button>
              </Popover>
              <input
                value={nickname}
                onChange={(e) => setNickname(e.target.value, "nickname")}
                placeholder="–í–≤–µ–¥–∏—Ç–µ Telegram-–Ω–∏–∫–Ω–µ–π–º(@park_angel_bot)"
                className={styles.home_input}
                type="text"
                onKeyDown={hideKeyboard}
              />
              <button type="button" onClick={onHandleLoginClick} className={styles.login_button}>
                –í–æ–π—Ç–∏
              </button>
            </div>
          )}
        </>
      )}
      <Modal
        setOpenModal={setOpenPasswordModal}
        openModal={openPasswordModal}
        closeButton={false}
      >
        <form onSubmit={onHandleSubmit} className={styles.form}>
          <input
            value={password}
            onChange={(e) => setPassword(e.target.value, "password")}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            className={styles.home_input}
            type="text"
          />
          <div className={styles.text_block}>
            <span>–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</span><br/>
            <a href={supportLink} className={styles.link}>–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</a>
          </div>
          <Button type="submit">–í–æ–π—Ç–∏</Button>
        </form>
      </Modal>
    </div>
  );
};

export default Home;
